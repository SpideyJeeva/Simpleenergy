# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LblkJ8NoPa9k_MHcPUATEr8pBmBh0HGn
"""



# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns


data = pd.read_csv('data.csv')


print("Dataset Summary:")
print(data.describe())


print("\nMissing Values:")
print(data.isnull().sum())

# Visualize relationships between features and target
sns.pairplot(data, vars=['Fixed Battery Voltage', 'Portable Battery Voltage',
                         'Portable Battery Current', 'Fixed Battery Current',
                         'Motor Status', 'BCM Battery Selected',
                         'Portable Battery Temperatures', 'Fixed Battery Temperatures'],
             hue='Effective SOC')
plt.show()

# Correlation analysis
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True)
plt.title('Feature Correlation Matrix')
plt.show()

# Feature and target columns
X = data[['Fixed Battery Voltage', 'Portable Battery Voltage', 'Portable Battery Current',
          'Fixed Battery Current', 'Motor Status', 'BCM Battery Selected',
          'Portable Battery Temperatures', 'Fixed Battery Temperatures']]
y = data['Effective SOC']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Development
# Example: Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions and Evaluation
y_pred = model.predict(X_test)

# Model Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# KPI Calculation
def calculate_kpis(data):
    kpis = {}

    # Example KPIs
    kpis['Charge Cycle'] = data['Portable Battery Current'].mean() / data['Portable Battery Voltage'].mean()
    kpis['Range'] = data['Fixed Battery Voltage'].max() - data['Fixed Battery Voltage'].min()
    kpis['Battery Performance'] = data['Effective SOC'].mean()

    return kpis

kpis = calculate_kpis(data)
print("Calculated KPIs:")
for kpi, value in kpis.items():
    print(f"{kpi}: {value}")







